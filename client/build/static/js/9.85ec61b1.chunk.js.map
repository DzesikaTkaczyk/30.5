{"version":3,"sources":["components/common/Button/Button.js","components/common/TextField/TextField.js","components/common/SectionTitle/SectionTitle.js","components/features/PostForm/PostForm.js","components/features/PostForm/PostFormContainer.js","components/pages/NewPost/NewPost.js","components/common/PageTitle/PageTitle.js","components/common/Spinner/Spinner.js","components/common/Alert/Alert.js"],"names":["Button","variant","children","otherProps","className","TextField","value","label","onChange","length","SectionTitle","PostForm","state","post","title","author","content","handleChange","e","setState","target","name","handleEditor","text","addPost","props","preventDefault","resetRequest","this","request","error","Alert","success","pending","Spinner","onSubmit","options","placeholder","toolbar","buttons","React","Component","connect","getRequest","dispatch","addPostRequest","NewPost","PageTitle","PostFormContainer","animationIn","animationOut","icon"],"mappings":"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","file":"static/js/9.85ec61b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ variant = '', children, ...otherProps }) => (\r\n  <button { ...otherProps } className={ `button button--${variant}`}>\r\n    { children }\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './TextField.scss';\r\n\r\nconst TextField = ({ value, label, onChange, ...otherProps }) => (\r\n  <label className=\"text-field\">\r\n    <span className={`text-field__label ${(!value.length > 0) ? 'text-field__label--big' : ''}`}>{label}</span>\r\n    <input {...otherProps} value={value} onChange={onChange} className=\"text-field__input\" />\r\n  </label>\r\n);\r\n\r\nTextField.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TextField;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './SectionTitle.scss';\r\n\r\nconst SectionTitle = ({ children }) => (\r\n  <h2 className=\"section-title\">\r\n     {children}\r\n  </h2>\r\n);\r\n\r\nSectionTitle.propTypes = {\r\n  children: PropTypes.string,\r\n};\r\n\r\nexport default SectionTitle;\r\n","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Editor from 'react-medium-editor';\r\nimport 'medium-editor/dist/css/medium-editor.css';\r\nimport 'medium-editor/dist/css/themes/default.css';\r\n\r\nimport TextField from '../../common/TextField/TextField';\r\nimport SectionTitle from '../../common/SectionTitle/SectionTitle';\r\nimport Button from '../../common/Button/Button';\r\nimport Alert from '../../common/Alert/Alert';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport './PostForm.scss';\r\n\r\nclass PostForm extends React.Component {\r\n  componentDidMount() {\r\n    const { resetRequest} = this.props;\r\n    resetRequest();\r\n  }\r\n\r\n  state = {\r\n    post: {\r\n      title: '',\r\n      author: '',\r\n      content: ''\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { post } = this.state;\r\n    this.setState({ post: { ...post, [e.target.name]: e.target.value }});\r\n  }\r\n\r\n  handleEditor = (text) => {\r\n    const { post } = this.state;\r\n    this.setState({ post: { ...post, content: text }});\r\n  }\r\n\r\n  addPost = (e) => {\r\n    const { addPost } = this.props;\r\n    const { post } = this.state;\r\n\r\n    e.preventDefault();\r\n    addPost(post);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { post } = this.state;\r\n    const { handleChange, handleEditor, addPost } = this;\r\n    const { request } = this.props;\r\n\r\n    if(request.error) return <Alert variant=\"error\">{request.error}</Alert>\r\n    else if(request.success) return <Alert variant=\"success\">Post has been added!</Alert>\r\n    else if(request.pending) return <Spinner />\r\n    else return (\r\n      <form onSubmit={addPost}>\r\n\r\n        <TextField\r\n          label=\"Title\"\r\n          value={post.title}\r\n          onChange={handleChange}\r\n          name=\"title\"\r\n        />\r\n\r\n        <TextField\r\n          label=\"Author\"\r\n          value={post.author}\r\n          onChange={handleChange}\r\n          name=\"author\"\r\n        />\r\n\r\n        <SectionTitle>Edit post content</SectionTitle>\r\n\r\n        <Editor\r\n          className=\"content-editor\"\r\n          text={post.content}\r\n          onChange={handleEditor}\r\n          options={{ placeholder: false, toolbar: { buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3'] } }}\r\n        />\r\n\r\n        <Button variant=\"primary\">Add post</Button>\r\n\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nPostForm.propTypes = {\r\n  request: PropTypes.object.isRequired,\r\n  addPost: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PostForm;","import { connect } from 'react-redux';\r\nimport { getRequest, addPostRequest, resetRequest } from '../../../redux/postsRedux';\r\nimport PostForm from './PostForm';\r\n\r\nconst mapStateToProps = state => ({\r\n  request: getRequest(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addPost: (post) => dispatch(addPostRequest(post)),\r\n  resetRequest: () => dispatch(resetRequest()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);","import React from 'react';\r\n\r\nimport PageTitle from '../../common/PageTitle/PageTitle';\r\nimport PostFormContainer from '../../features/PostForm/PostFormContainer';\r\n\r\nconst NewPost = () => (\r\n\t<div>\r\n\t\t<PageTitle>Add post</PageTitle>\r\n\t\t<PostFormContainer />\r\n\t</div>\r\n);\r\n\r\nexport default NewPost;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageTitle.scss';\n\nconst PageTitle = ({ children }) => (\n  <h1 className=\"page-title\">\n     {children}\n  </h1>\n);\n\nPageTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default PageTitle;\n","import React from 'react';\nimport { Animated } from 'react-animated-css';\n\nimport './Spinner.scss';\n\nconst Spinner = () => (\n  <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\n    <div className=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </Animated>\n);\n\nexport default Spinner;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated } from 'react-animated-css';\r\nimport { MdInfoOutline, MdDone, MdErrorOutline } from 'react-icons/md';\r\n\r\nimport './Alert.scss';\r\n\r\nconst Alert = ({ variant = '', children, ...otherProps }) => {\r\n\r\n  const icon = () => {\r\n    switch(variant) {\r\n      case 'info':\r\n        return <MdInfoOutline />\r\n      case 'success':\r\n        return <MdDone />\r\n      case 'warning':\r\n        return <MdErrorOutline />\r\n      case 'error':\r\n        return <MdErrorOutline />\r\n      default:\r\n        return <MdInfoOutline />\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\r\n      <div {...otherProps} className={`alert alert--${variant}`}>\r\n        {icon()}\r\n        <span className=\"alert__desc\">{children}</span>\r\n      </div>\r\n    </Animated>\r\n  )\r\n\r\n};\r\n\r\nAlert.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Alert;\r\n"],"sourceRoot":""}